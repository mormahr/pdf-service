name: CI
on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: mormahr/pdf-service
          flavor: |
            latest=false
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=edge,branch=main
            type=sha,format=long
          labels: |
            org.opencontainers.image.vendor=Moritz Mahringer

      - name: Docker meta (testing)
        id: docker_meta_testing
        uses: docker/metadata-action@v3
        with:
          images: mormahr/pdf-service
          flavor: |
            latest=false
            suffix=-testing
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=edge,branch=main
            type=sha,format=long
          labels: |
            org.opencontainers.image.vendor=Moritz Mahringer

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract branch name
        shell: bash
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          SAFE_BRANCH=${BRANCH//\//_}
          echo "##[set-output name=branch;]$(echo $SAFE_BRANCH)"
        id: extract_branch

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          build-args: GITHUB_SHA=${{ github.sha }}
          cache-from: |
            type=registry,ref=mormahr/pdf-service:main
            type=registry,ref=mormahr/pdf-service:main-testing
            type=registry,ref=mormahr/pdf-service:${{ steps.extract_branch.outputs.branch }}
            type=registry,ref=mormahr/pdf-service:${{ steps.extract_branch.outputs.branch }}-testing
          cache-to: type=inline
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          target: production

      - name: Build and push (testing image)
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          build-args: GITHUB_SHA=${{ github.sha }}
          cache-from: |
            type=registry,ref=mormahr/pdf-service:main
            type=registry,ref=mormahr/pdf-service:main-testing
            type=registry,ref=mormahr/pdf-service:${{ steps.extract_branch.outputs.branch }}
            type=registry,ref=mormahr/pdf-service:${{ steps.extract_branch.outputs.branch }}-testing
          cache-to: type=inline
          tags: ${{ steps.docker_meta_testing.outputs.tags }}
          labels: ${{ steps.docker_meta_testing.outputs.labels }}
          target: testing

  test:
    runs-on: ubuntu-20.04
    needs:
      - build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run tests
        run: |
          mkdir coverage
          chown 1001 coverage

          docker run \
            --rm \
            --user pdf_service_user \
            -v "$(pwd)/coverage:/usr/src/app/coverage/" \
            mormahr/pdf-service:sha-${{ github.sha }}-testing \
            python -m pytest \
              -rA \
              --cov=pdf_service \
              --cov-report term \
              --cov-report html:coverage/cov_html \
              --cov-report xml:coverage/cov.xml \
              --cov-report annotate:coverage/cov_annotate

      - name: Upload coverage report
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/cov.xml
          flags: unit
          name: unit
          fail_ci_if_error: true
          verbose: true

  test-e2e:
    runs-on: ubuntu-20.04
    needs:
      - build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run visual tests
        run: |
          cd e2e
          export TAG="sha-$GITHUB_SHA"
          docker-compose build test
          docker-compose run --rm test

  tag:
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    needs:
      - build
      - test
      - test-e2e
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: mormahr/pdf-service
          flavor: |
            latest=false
          tags: |
            type=edge,branch=main

      - name: Tag edge
        env:
          INPUT_TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          docker pull mormahr/pdf-service:sha-${{ github.sha }}
          echo "$INPUT_TAGS" | while read -r tag
          do
            echo "$tag"
            docker tag mormahr/pdf-service:sha-${{ github.sha }} "$tag"
            docker push "$tag"
          done
