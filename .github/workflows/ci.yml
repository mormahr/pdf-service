name: CI
on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  # pull_request:
  #   branches:
  #     - '**'

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: mormahr/pdf-service
          flavor: |
            latest=auto
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=tag
            type=ref,event=branch
            type=ref,event=pr
            type=edge,branch=main
            type=sha,format=long
          labels: |
            org.opencontainers.image.vendor=Moritz Mahringer

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract branch name
        shell: bash
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          SAFE_BRANCH=${BRANCH//\//_}
          echo "##[set-output name=branch;]$(echo $SAFE_BRANCH)"
        id: extract_branch

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          build-args: GITHUB_SHA=${{ github.sha }}
          cache-from: |
            type=registry,ref=mormahr/pdf-service:latest
            type=registry,ref=mormahr/pdf-service:${{ steps.extract_branch.outputs.branch }}
          cache-to: type=inline
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          target: production

  test:
    runs-on: ubuntu-20.04
    needs:
      - build

    container:
      image: mormahr/pdf-service:sha-${{ github.sha }}
      options: --user root

    steps:
      - name: Install dev dependencies
        run: |
          cd /usr/src/app
          apk add --no-cache \
                poppler-utils \
                poppler-dev
          pip3 install --no-cache-dir -r requirements-dev.txt

      - name: Run tests
        run: |
          cd /usr/src/app
          python -m pytest \
            -rA \
            --cov=pdf_service \
            --cov-report term \
            --cov-report html:coverage/cov_html \
            --cov-report xml:coverage/cov.xml \
            --cov-report annotate:coverage/cov_annotate

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: Generated test images
          path: /usr/src/app/test-data/*.png

      - name: Install bash for codecov uploader
        run: apk add bash

      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: /usr/src/app/coverage/cov.xml
          flags: unit
          name: unit
          fail_ci_if_error: true
          verbose: true
          root_dir: /usr/src/app

  test-e2e:
    runs-on: ubuntu-20.04
    needs:
      - build
    services:
      pdf:
        image: mormahr/pdf-service:sha-${{ github.sha }}
        ports:
          - 8080:8080

    steps:
      - name: "Generate basic PDF without returning invalid status code"
        run: curl -f --data "<p>Hello World</p>" http://localhost:8080/generate > test.pdf

  release:
    runs-on: ubuntu-20.04
    needs:
      - build
      - test
      - test-e2e
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push existing image as :latest
        run: |
          docker pull mormahr/pdf-service:sha-${{ github.sha }}
          docker tag mormahr/pdf-service:sha-${{ github.sha }} mormahr/pdf-service:latest
          docker push mormahr/pdf-service:latest
